State machine
Explore - what we have now
Encounter - Dialogs and "menus of actions"
Combat - Detailed combat with more detail round the character

This requires moving the app loop into an ExploreState class and then creating a state machine that has state.  Likely
we'll have a base class AdventureState.  The state machine can change state.  Each state will have a pre/post and action
set of functions.

The idea is to have events change state, such as when there is a chance to have a dialog with an NPC or when a combat
starts.  Changing the state back to Explore would be the same way, some action or event.  Example, during a dialog,
one option might be "Say goodbye", and that would be an action which changes state to Explore.

Add a new COmmand "Talk" or "Talk to <npc name>" and that would change state from explore to Encounter with that NPC,
starting a dialog.

When we get to a real RPG character with attributes, etc. then the attributes will be useful
for all states.

For secret doors, et al, create an action that installs a door feature or whatever is needed

For Encounters, the concept of a "dialog" will be what an encounter is, that is a series of actions chosen by
the player.  For a dialog this will likely be Describe actions, etc.
If an encounter has the ability to trade items (a merchant for example), then "(B) Buy" and (S) Sell" options will
be available along with the other actions.  These will be actions as well I guess.
Buying and selling will apply a factor to the actual value of an item.  (Yes, only items can be bought and sold)

I added "Actors" in version 1.1.  This allows for things (aka people or monsters) to move around and interact with the adventure, a level of dynamic interaction which adds a lot of possibilities.

The next thing 1.1 will do is allow a player to save their progress.  Saving progress is an interesting problem to solve.  I have never done this before in an application of this size.  There will be a large amount of...  "technical jabber..."  I am excited to figure it out.

Future versions...

1.1 - Basic Actors.  Save progress (work).  More logging.  No real story, just testing stories.

Add more.  More commands.  More Actor behavior.  More "things".  Create a reasonably sized story to play.

Add Maps.  Simple command "map", which then shows an ASCII art map.  Each "Area" can be assigned a different map object
        For example, when in an overland area, an overland map is shown, when in a town area, a map of the town, etc.
        Also, the maps could be altered (basically a new set of map messages) based on outcomes, assigning a new "map"
            to the named map object.  I guess a "MapManager", and each area is given a map id, and that id doesn't change
            but the underlying map in the map manager does.
      Release a Story (<-goal)

DONE - NO RELEASE

1.2 - Further development... Adding bigger stuff is more fun than little stuff.

2.0 - Game elements!  There is no design work completed at this time.  This is merely an idea.

The idea is that I can continue to develop more for version 1.x while I start on version. 2.x.  I really feel that 1.x will be a viable story game in and of itself.

***2018-11-11***
Getting ready for version 1.1.  Looks like I might add 1.1 and 1.2 into 1.1.  Maps are cool.  Story idea is ready.
ToDo:
1. Start the Robot story
2. Create an InputStream that pulls commands out of a generator for testing

Completed
Persistance refactor